module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig autoTest;
  sig failCase;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    
    
    .rst(rst) {
      multi_seven_seg seg;

    }
  }

  // instantiate ALU
  alu alu; 
  // instantiate storeMemory
  register reg; 
  // 4 states, INPUTA is to store a, INPUTB is to store b, OUTPUT is for calculation of output
  fsm state(.clk(clk), .rst(rst)) = {IDLE, INPUTA, INPUTB, OUTPUT};
  
  //instantiate autotest
  autotest autotest(.clk(clk),
   .rst(rst),
    .mode_switch(autoTest));
    
  fail_case fc(.clk(clk),
    .rst(rst),
      .mode_switch(failCase));
  
  //autotest.io_button = io_button;
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
   
    //default screen
    seg.values = {4d0,4d0,4d0,4d0};
    
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the driver
    
    io_led = io_dip;   // connect the DIP switches to the LEDs
    
    reg.clk = clk; // set clock in storeMemory to clk
    reg.buttonA = io_button[3]; // press left button to store input a
    reg.buttonB = io_button[4]; // press right button to store input b
    reg.switch[7:0] = io_dip[0]; // set right most 8 switch to least significant 8 bits starting from right 
    reg.switch[15:8] = io_dip[1]; // set 8 switches in the middle to most significants 8 bits starting from left

    //if the first switch from left is not on -> autoTest, if it is on -> manual test
    autoTest = ~io_dip[2][7];
    failCase = io_dip[2][6];

      case(state.q){
        state.IDLE:
          if(io_button[1]){
            state.d = state.INPUTA;
          }
        state.INPUTA: 
          seg.values = {4d0, 4d0, 4d0, 4d11};
          io_led[0] = reg.geta[7:0]; // turn on corresponding LEDs (right most 8 switches) for the leasr significant bits of input a 
          io_led[1] = reg.geta[15:8]; // turn on corresponding LEDs (middle 8 switches) for the most significant bits of input a
          if(io_button[1]){ // press middle button -> OUTPUT state
            state.d = state.OUTPUT;
          }
          else if(io_button[2]){ // press bottom button -> INPUTB
            state.d = state.INPUTB;
          }
        state.INPUTB:
          io_led[0] = reg.getb[7:0]; // turn on corresponding LEDs (right most 8 switches) for the leasr significant bits of input b
          io_led[1] = reg.getb[15:8]; /// turn on corresponding LEDs (middle 8 switches) for the most significant bits of input b
          if(io_button[1]){ // press middle button -> OUTPUT state
            state.d = state.OUTPUT;
          }
          else if(io_button[0]){ // press top button -> INPUTA
            state.d = state.INPUTA;
          }
        state.OUTPUT:
          io_led[0] = alu.out[7:0];   // turn on corresponding LEDs (right most 8 switches) for the leasr significant bits of computed output
          io_led[1] = alu.out[15:8];   // turn on corresponding LEDs (middle 8 switches) for the most significant bits of computed output
          if(io_button[0]){ // press top button -> INPUTA
            state.d = state.INPUTA;
          }
          else if(io_button[2]){ // press bottom button -> INPUTB
            state.d = state.INPUTB;
          }
      }
    alu.a = reg.geta; // set the stored A values to input a of ALU
    alu.b = reg.getb; // set the stored B values to input b of ALU
    alu.alufn = io_dip[2][5:0]; // set ALUFN to the six swithes from 3rd most left

    io_led[2][7:0] = io_dip[2][7:0]; // turn on corresponding LEDS for alufn
    
    if (autoTest == 1){
      // call autotest module and run
      seg.values = autotest.out;
      io_led = autotest.leds;
    }
    if (failCase == 1){
      seg.values = fc.out;
    }
  }
}
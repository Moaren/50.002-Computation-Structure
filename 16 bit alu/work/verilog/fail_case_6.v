/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fail_case_6 (
    input clk,
    input rst,
    input mode_switch,
    output reg [15:0] out
  );
  
  
  
  reg autotest_reset;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_overflow;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_3 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .overflow(M_alu_overflow)
  );
  
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [1-1:0] M_testButton_out;
  edge_detector_16 testButton (
    .clk(clk),
    .in(mode_switch),
    .out(M_testButton_out)
  );
  
  localparam START_state = 1'd0;
  localparam FAIL_state = 1'd1;
  
  reg M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    autotest_reset = M_testButton_out | rst;
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_state_q)
      START_state: begin
        M_alu_alufn = 1'h0;
        out = 16'h0000;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        if (M_counter_q[25+0-:1]) begin
          M_state_d = FAIL_state;
        end
      end
      FAIL_state: begin
        M_alu_alufn = 6'h03;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0003;
        if (M_alu_out == 16'h01c1) begin
          out = 16'h0019;
        end else begin
          out = 16'hab1d;
        end
      end
      default: begin
        M_state_d = START_state;
        out = 16'h0000;
        M_alu_a = 1'h0;
        M_alu_b = 1'h0;
        M_alu_alufn = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (autotest_reset == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (autotest_reset == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
